package

import cn.spark.chipro.core.page.PageFactory;
import cn.spark.chipro.core.page.PageInfo;
import cn.spark.chipro.core.util.ToolUtil;
import org.springframework.stereotype.Service;

    ${package.ServiceImpl}
;
    ${package.Entity}.${entity};
    ${package.Mapper}.${table.mapperName};
    ${package.EntitySpecParams}.${entity}Param;
    ${package.EntitySpecResult}.${entity}Result;
    ${package.Service}.${table.serviceName};
    ${superServiceImplClassPackage}
        ;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

        }
#else
        public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>implements ${table.serviceName} {

        @Override
        public void add(${entity}Param param){
    ${entity} entity=getEntity(param);
        this.save(entity);
        }

        @Override
        public void delete(${entity}Param param){
        this.removeById(getKey(param));
        }

        @Override
        public void update(${entity}Param param){
    ${entity} oldEntity=getOldEntity(param);
    ${entity} newEntity=getEntity(param);
        ToolUtil.copyProperties(newEntity,oldEntity);
        this.updateById(newEntity);
        }

        @Override
        public ${entity}Result findBySpec(${entity}Param param){
        return null;
        }

        @Override
        public List<${entity}Result>findListBySpec(${entity}Param param){
        return null;
        }

        @Override
        public PageInfo findPageBySpec(${entity}Param param){
        Page pageContext=getPageContext();
        QueryWrapper<${entity}>objectQueryWrapper=new QueryWrapper<>();
        IPage page=this.page(pageContext,objectQueryWrapper);
        return PageFactory.createPageInfo(page);
        }

        private Serializable getKey(${entity}Param param){
    #set( $haveNoKey = true )
    #foreach($field in ${table.fields})
        #if(${field.keyFlag})
            #set( $haveNoKey = false )
                return param.get${field.capitalName}();
        #end
    #end
    #if(${haveNoKey})
            return null;
    #end
        }

        private Page getPageContext(){
        return PageFactory.defaultPage();
        }

        private ${entity} getOldEntity(${entity}Param param){
        return this.getById(getKey(param));
        }

        private ${entity} getEntity(${entity}Param param){
    ${entity} entity=new ${entity}();
        ToolUtil.copyProperties(param,entity);
        return entity;
        }

        }
#end
